`+`(3,4)
base::`+`(3,4)
base::+(3,4)
base::"+"(3,4)
library(ddhodge)
vignette(package="ddhodge")
devtools::install()
vignette(package="ddhodge")
vignette(package="ddhodge")
devtools::build()
devtools::install()
vignette(package="ddhodge")
vignette(package="ddhodge")
vignette("ddhodge")
vignette("adjcurve""ddhodge")
vignette("adjcurve")
vignette("DESeq2")
vignette()
devtools::build_vignettes()
vignette("ddhodge")
devtools::build()
devtools::install()
vignette("ddhodge")
usethis::use_vignette()
usethis::use_vignette("ddhodge")
devtools::use_vignette("ddhodge")
?usethis::use_vignette
devtools::install(build_vignettes = TRUE)
vignette("ddhodge")
vignette(package="ddhodge")
browseVignettes("ddhodge")
?qnorm
3^-(1/2)
sqrt(3)
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install(build_vignettes = TRUE)
?diffusionMaps
dim(R)
dim(R)
help(package="ddhodge")
dyno::fibroblast_reprogramming_treutlein
dyno::fibroblast_reprogramming_treutlein$counts
X <- dyno::fibroblast_reprogramming_treutlein$counts
dim(X)
X[,1:10]
X[,1:10] %>% head
library(dplyr)
X[,1:10] %>% head
X[,1:10] %>% cor
X[,1:10] %>% dist
R <- X[,1:10] %>% {log(.+1)} %>% dist
R
image(R)
plot(R)
image(as.matrix(R),useRaster=TRUE)
image(as.matrix(R),useRaster=TRUE,asp=1)
d <- diffusionMaps(R)
R
range(R)
d <- diffusionMaps(R)
R
R <- X[rowSums(X)>0,1:10] %>% {log(.+1)} %>% dist
d <- diffusionMaps(R)
R
range(R)
dim(R)
dim(as.matrix(R))
R
R[,1]
dim(as.matrix(R))
debug(diffusionMaps)
d <- diffusionMaps(R)
sigma
logW
logW %>% range
rs
sqrt(rs)
rs
range(rs)
D
1/D
Q
devtools::install(build_vignettes = TRUE)
d <- diffusionMaps(R)
d
d$Psi
d$Psi[,1:3]
d$Psi[,1:3] %>% plot
d$Psi[,1:32] %>% plot
d$Psi[,1:2] %>% plot
d$Phi[,1:2]
plot(d$Psi%*%diag(d$eig^1))
plot(round(d$Psi%*%diag(d$eig^1),30))
plot(round(d$Psi%*%diag(d$eig^1),12))
plot(round(d$Psi%*%diag(d$eig^1),10))
plot(round(d$Psi[,2:3]%*%diag(d$eig^1),10))
plot(round(d$Psi%*%diag(d$eig^1)[,2:3],10))
plot(d$Psi%*%diag(d$eig^1)[,2:3])
plot(d$Psi%*%diag(d$eig^2)[,2:3])
plot(d$Psi%*%diag(d$eig^20)[,2:3])
plot(d$Psi%*%diag(d$eig^200)[,2:3])
plot(d$Psi%*%diag(d$eig^2)[,2:3])
plot(d$Psi%*%diag(d$eig^2)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^3)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^4)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^5)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^6)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^7)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^10)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^200)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^20)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^0)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^1)[,2:3],asp=1)
plot(d$Psi%*%diag(d$eig^0)[,2:3],asp=1)
pairs(d$Psi%*%diag(d$eig^0)[,2:6],asp=1)
pairs(d$Psi%*%diag(d$eig^0)[,2:5],asp=1)
d$Psi[,1]
pairs(d$Psi[,2:5],asp=1)
source('~/work/hodge/ddhodge/R/graphConstr.R')
difusionGraph(X,dyno::fibroblast_reprogramming_treutlein$grouping=="MEF")
devtools::install(build_vignettes = TRUE)
difusionGraph(X,dyno::fibroblast_reprogramming_treutlein$grouping=="MEF")
source('~/work/hodge/ddhodge/R/graphConstr.R')
dds
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
X
X[1:10,1:10]
t(X[1:10,1:10])
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
prcomp
?prcomp
?dist
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
X
g <- diffusionGraph(t(X)
)
g
plot(g)
gggraph <- function(...,ewid="weight",vcol="group")
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol),size=2) +
#geom_node_point(aes_string(colour=vcol,size=vsize))
ggsci::scale_color_d3("category20")
gggraph(g)
library(ggraph)
gggraph(g)
g
E(g)
igraph::E(g)
igraph::V(g)
names(igraph::V(g))
igraph::V(g)$group
igraph::V(g)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(g)
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
A
divop(g)
source('~/work/hodge/ddhodge/R/graphConstr.R')
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
diffusionGraph(X)
source('~/work/hodge/ddhodge/R/graphConstr.R')
diffusionGraph(t(X))
g
str(g)
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
div
divop
gradop
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dv <- diffusionGraph(t(X))
roots
dv
roots
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
devtools::install(build_vignettes = TRUE)
dv
dv <- diffusionGraph(t(X))
dv
dv <- diffusionGraph(t(X),1)
dv
dv <- diffusionGraph(t(X),1:3)
dv
plot(dv)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),sample(100,392))
dv <- diffusionGraph(t(X),sample(100,392,rep=TRUE))
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),sample(100,392,rep=TRUE))
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),sample(100,392,rep=TRUE))
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),sample(10,392,rep=TRUE))
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1,s=0)
dv <- diffusionGraph(t(X),1:3,s=0)
dv <- diffusionGraph(t(X),1:3,s=0.4)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1:3,s=100)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1:3,s=10)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1:3,s=3)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1:3,s=2)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1:3,s=1)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
dv <- diffusionGraph(t(X),1:3,s=2)
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
source('~/work/hodge/ddhodge/R/graphConstr.R')
plot(dv,pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
g <- diffusionGraph(t(X),1:3,s=2)
plot(div(g),pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
plot(potential(g),pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
potential(g)
g
g <- diffusionGraph(t(X),1:100,s=2)
potential(g)
-div(g)
L <- igraph::laplacian_matrix(igraph::as.undirected(g),weight=NA)
L
qr(L)
qr(L)$rank
g
degree(g)
igraph::degree(g)
table(igraph::degree(g))
?qr
L
?Matrix::solve
drop(solve(qr(L + bias*diag(ncol(L))),-div(g)))
drop(solve(qr(L)),-div(g)))
drop(solve(qr(L),-div(g)))
drop(Matrix::solve(qr(L),-div(g)))
drop(Matrix::solve(Matrix::qr(L),-div(g)))
drop(Matrix::solve(Matrix::qr(L),-div(g)))
Matrix::solve(Matrix::qr(L),-div(g))
L
?igraph::laplacian_matrix
Matrix::solve(Matrix::qr(L),-div(g))
Matrix::solve(L,-div(g))
Matrix::solve(L,-div(g))
?Matrix::solve(L,-div(g))
Matrix::solve(Matrix::qr(L),-div(g))
?Matrix::solve(L,-div(g))
Matrix::solve(L,-div(g))
Matrix::solve(Matrix::qr(L),-div(g)) %>% head
?Matrix::solve(L,-div(g)) %>% head
Matrix::solve(L,-div(g)) %>% head
potential(g)
devtools::install(build_vignettes = TRUE)
potential(g)
devtools::install(build_vignettes = TRUE)
potential(g)
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
g
colnames(X)
colnames(X)
g
igraph::V(g)
igraph::V(g)$names
igraph::V(g)$names
igraph::V(g)$name
dimnames(X)
dimnames(X) %>% str
g
devtools::install(build_vignettes = TRUE)
rm(diffusionGraph)
g <- diffusionGraph(t(X),1:100,s=2)
g
igraph::V(g)
igraph::V(g)$name
graph.altmat
?igraph::graph.adjacency
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
g
devtools::install()
rm(diffusionGraph)
devtools::install()
g <- diffusionGraph(t(X),1:100,s=2)
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
g
igraph::V(g)$name
igraph::V(g)$names
igraph::V(g)
source('~/work/hodge/ddhodge/R/graphConstr.R')
graph.altmat()
A
randomalt <- function(n,p=c(0.9,0.05,0.05)) {
A <- matrix(sample(c(0,1,2),n*n,prob=p,rep=TRUE),n)
A-t(A)
}
randomalt(A)
randomalt(10)
graph.altmat(randomalt(10))
colnames(randomalt(10))
source('~/work/hodge/ddhodge/R/graphConstr.R')
graph.altmat(randomalt(10))
graph.altmat(randomalt(10))
graph.altmat(randomalt(10))
a <- randomalt(10)
alph
i
a <- randomalt(10)
a
colnames(a)
colnames(a) <- LETTERS[1:10]
a
graph.altmat(a)
a
source('~/work/hodge/ddhodge/R/graphConstr.R')
graph.altmat(a)
igraph::V(graph.altmat(a))
igraph::V(graph.altmat(a))$name
source('~/work/hodge/ddhodge/R/graphConstr.R')
graph.altmat(a)
source('~/work/hodge/ddhodge/R/graphConstr.R')
graph.altmat(a)
graph.altmat(a)
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
graph.altmat(a)
g <- diffusionGraph(t(X),1:100,s=2)
g
colnames(X)
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
g
d <- diffusionMaps(R)
d
diffusionMaps
g
potential(g)
potential(g)
plot(potential(g))
plot(potential(g),pch=16,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping))
g
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
g
igraph::ne(g)
igraph::ne(igraph::E(g))
igraph::n(igraph::E(g))
igraph::ecount(g)
igraph::vcount(g)
392^q2
392^2
392^2-392
igraph::vcount(g)
g
igraph::E(g)
igraph::E(g)$weights
igraph::E(g)$weight
igraph::V(g)$name
g
g
A
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
g
ggraph(g)
g
igraph::V(g)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
ggraph(g)
g
plot(g)
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),1:100,s=2)
gggraph(g)
igraph::V(g)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(g)
igraph::degree(g)
g <- diffusionGraph(t(X),s=1)
igraph::V(g)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(g)
g <- diffusionGraph(t(X),dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1)
gggraph(g)
igraph::V(g)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(g)
gggraphc(g)
gggraphc <- function(...,ewid="weight",vcol="u",vsize=NULL)
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol,size=vsize))
gggraphc(g)
igraph::V(g)$u <- potentigl(g)
igraph::V(g)$u <- potential(g)
igraph::V(g)$div <- div(g)
div(g)
div(g) %>% str
devtools::install()
igraph::V(g)$div <- div(g)
gggraphc(g)
gggraphc(g,vcol="div")
sum(div(g))
div(g)
plot(div_o,div(g))
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1)
g
diffusionGraph
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1)
igraph::V(g)$div <- div(g)
gggraphc(g,vcol="div")
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1,k=3)
igraph::V(g)$div <- div(g)
gggraphc(g,vcol="div")
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1,k=3)
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1,k=3)
g
igraph::E(g)
igraph::E(g)$weight
igraph::E(g)
igraph::E(g) <- igraph::E(g)[igraph::E(g)$weight != 0]
igraph::E(g)[igraph::E(g)$weight != 0]
plot(igraph::E(g)[igraph::E(g)$weight != 0])
igraph::E(g)[igraph::E(g)$weight != 0]
h <- igraph::E(g)[igraph::E(g)$weight != 0]
h
h
str(h)
igraph::delete_edges(g, igraph::E(g)[abs(igraph::E(g)$weight) == 1e-8])
h <- igraph::delete_edges(g, igraph::E(g)[abs(igraph::E(g)$weight) == 1e-8])
plot(h)
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte",s=1,k=3)
g
gggraphc(g,vcol="div")
dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte"
sum(dyno::fibroblast_reprogramming_treutlein$grouping=="Myocyte")
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=3)
gggraphc(g,vcol="div")
gggraphc(g,vcol="u")
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30)
gggraphc(g,vcol="u")
igraph::delete_edges(g, abs(igraph::E(g)$weight) < 1e-8])
igraph::delete_edges(g, abs(igraph::E(g)$weight) < 1e-8)
?igraph::delete_edges(g, abs(igraph::E(g)$weight) < 1e-8)
?igraph::delete_edges(g, which(abs(igraph::E(g)$weight) < 1e-8))
igraph::delete_edges(g, which(abs(igraph::E(g)$weight) < 1e-8))
igraph::delete_edges(g, igraph::E(g)[abs(igraph::E(g)$weight) == 1e-8])
igraph::delete_edges(g, igraph::E(g)[abs(igraph::E(g)$weight) < 1e-8])
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(X),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30)
gggraphc(g,vcol="u")
gggraphc(g,vcol="div")
g <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11)
gggraphc(g,vcol="div")
g <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
d <- diffusionMaps(R)
d
plot(d$Psi%*%diag(d$eig^1)[,3:4],asp=1,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping),pch=16)
plot(d$Psi%*%diag(d$eig^1)[,2:3],asp=1,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping),pch=16)
Psi%*%diag(eig^s))[,seq(2,ndc+1)
Psi%*%diag(eig^s))[,seq(2,ndc+1)]
Psi%*%diag(eig^s))[,seq(1,3)]
d$Psi%*%diag(d$eig^s))[,seq(1,3)]
d$Psi%*%diag(d$eig))[,seq(1,3)]
d$Psi%*%diag(d$eig)[,seq(1,3)]
d$Psi%*%diag(d$eig)[,seq(1,3)] %>% head
(d$Psi%*%diag(d$eig))[,seq(1,3)] %>% head
source('~/work/hodge/ddhodge/R/graphConstr.R')
R <- dist(log(X+1))
R <- dist(log(gscale(X)+1))
R
d <- diffusionMaps(R)
R <- dist(log(gscale(X+1)))
d <- diffusionMaps(R)
plot(d$Psi%*%diag(d$eig^1)[,2:3],asp=1,col=factor(dyno::fibroblast_reprogramming_treutlein$grouping),pch=16)
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
g <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
g
gggraphc(g,vcol="div")
igraph::E(g)$weight
hist(igraph::E(g)$weight)
plot(igraph::E(g)$weight)
plot(igraph::V(g)$div)
plot(igraph::V(g)$u)
plot(igraph::V(g)$u,igraph::V(g)$div)
g <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
g
#library(dyno)
library(tidygraph)
library(ggraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
source("~/work/rscripts/geomNorm.R")
source("~/work/hodge/HodgeRank.R")
source("~/work/rscripts/diffusionMap.R")
knn <- function(x,k) rank(x,ties="max") %>% { . <= k+1 & . > 1}
ggpoints <- function(...)
ggplot(...) + geom_point() + coord_fixed() + theme_linedraw() +
ggsci::scale_color_d3("category20")
gggraph <- function(...,ewid="weight",vcol="group")
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol),size=2) +
#geom_node_point(aes_string(colour=vcol,size=vsize))
ggsci::scale_color_d3("category20")
gggraphc <- function(...,ewid="weight",vcol="u",vsize=NULL)
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol,size=vsize))
remakeg <- function(g,eattr="grad",tol=1e-6)
get.altmat(g,eattr) %>% graph.altmat(tol) %>% as_tbl_graph %N>%
mutate(group=V(g)$group) %>% filter(degree(.)>0) %>%
mutate(div=div(.), u=potential(.)) %E>% mutate(grad=grad(.))
dat <- dyno::fibroblast_reprogramming_treutlein
dat$root_milestone_id <- "MEF"
dat$group_ids <- c("MEF","d2_induced","d2_intermediate","d5_earlyMyocyte","d5_intermediate","d5_earlyiN","d5_failedReprog","Neuron","Myocyte","d22_failedReprog")
#dat <- readr::read_rds("~/work/hodge/dynodata/dentate-gyrus-neurogenesis_hochgerner.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/mesoderm-development_loh.rds")
# dataset is zenodo is too clean???
#dat <- readr::read_rds("~/work/hodge/dynodata/fibroblast-reprogramming_treutlein.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/myoblast-differentiation_trapnell.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/mESC-differentiation_hayashi.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/hematopoiesis-clusters_olsson.rds")
#labf <- factor(dat$grouping,c
#dat$counts <- t(m)
#dat$root_milestone_id <- "HighHigh"
#dat$group_ids <- c("HighLow","HighHigh","LowHigh","LowLow")
#dat$group_ids <- c("High","Low")
#marker <- m["CT010467.1",]
#dat$grouping <-ifelse(marker > quantile(marker,0.95),"High","Low")
#dat$grouping <- m[c("Prm1","CT010467.1"),] %>% apply(1,function(x) ifelse(x > quantile(x,0.9),"High","Low")) %>% apply(1,paste0,collapse="")
#dat$grouping <- m[c("Prm1","Tram1"),] %>% apply(1,function(x) ifelse(x > quantile(x,0.9),"High","Low")) %>% apply(1,paste0,collapse="")
labf <- factor(dat$grouping,dat$group_ids)
root <- dat$root_milestone_id
ncomp <- min(1000,length(labf))
m <- dat$count %>% t %>% {gscale(.+1)} %>% log
#m <- dat$expression %>% t %>% {log(.+1)}
p <- prcomp(t(m))
R <- dist(p$x[,1:ncomp]) %>% as.matrix
set.seed(111)
df <- bind_cols(group=labf,as_tibble(p$x))
ggpoints(df,aes(PC1,PC2,colour=group))
#tsne <- Rtsne::Rtsne(p$x[,1:ncomp],theta=0.5,pca=FALSE,perp=30)
tsne <- Rtsne::Rtsne(p$x[,1:ncomp],theta=0.5,pca=FALSE,perp=20)
df <- tsne$Y %>% as_tibble %>% rename(tSNE1=1,tSNE2=2) %>% bind_cols(df,.)
ggpoints(df,aes(tSNE1,tSNE2,colour=group))
pal <- ggsci::pal_d3("category20")(nlevels(labf))
usecurl <- FALSE
bias <- 0
alpha <- 2
s <- 1
nc <- 10
d <- dfm(R,k=7,alpha=alpha,truncate=FALSE)
#d <- dfm(R,sigma=200,alpha=alpha,truncate=FALSE)
pairs(p$x[,2:5],col=sub("FF$","66",pal[labf]),pch=16,cex=0.8,asp=1)
plot.dfm(d,2:5,s=s,col=sub("FF$","66",pal[labf]))
W <- as.matrix(dist((d$Psi%*%diag(d$eig^s))[,seq(2,nc+1)]))
Pt <- d$Psi%*%diag(d$eig^s)%*%t(d$Phi)
# Energy at s step started from root cells (ensemble):
#   equiv. to start the process from v=(1/m,1/m,..,1/m,0,0,....)
u <- -log(colMeans(Pt[labf==root,,drop=FALSE]))
#u <- -log(d$Phi[,1]) # equibulium
#u <- colMeans(Pt[labf==root,,drop=FALSE])
#A <- sign(outer(u,u,"-"))
# negate gradient to espcape potential well
#A <- t(outer(u,u,"-"))
A <- t(outer(u,u,"-"))/W; diag(A) <- 0
#A <- totalflow(d)
dimnames(A) <- dimnames(R)
div_o <- A %>% graph.altmat %>% div %>% scale(center=FALSE) %>% drop
#A[!(apply(W,1,knn,7) | t(apply(W,1,knn,7)))] <- 0 # KNN graph
A[!(apply(W,1,knn,30) | t(apply(W,1,knn,30)))] <- 0 # KNN graph
#A[!(apply(W,1,knn,15) | t(apply(W,1,knn,15)))] <- 0 # KNN graph
g <- graph.altmat(A) %>% as_tbl_graph %>%
mutate(group=labf, div=div(.), u=potential(.)) %>%
activate(edges) %>% mutate(grad=grad(.))
if(usecurl) {
C <- curlop(g)
phi <- solve(qr(tcrossprod(C)+bias*diag(nrow(C))),C%*%E(g)$weight)
g <- g %>% activate(edges) %>%
mutate(curl=drop(t(C)%*%phi),harmonic=weight-grad-curl) %E>%
filter(abs(weight) < 1e-6)
}
#wattr <- "shrink"
#wattr <- "sparse"
wattr <- "elastic"
#wattr <- "neighbour"
lambda <- 2e-4
#lambda <- 1e-4
if(wattr=="shrink") {
# Re-estimation of original data (weights) with small lambda*||div(g)||_L2
E(g)$shrink <- drop(solve(diag(ecount(g))+lambda*crossprod(divop(g)),E(g)$weight)) } else if(wattr=="sparse") {
# Re-estimation of original flow with sparse divergence (a.k.a signal approx.)
#sp <- genlasso::genlasso(y=E(g)$weight,D=as.matrix(divop(g)),svd=TRUE)
G <- as.matrix(MASS::ginv(laplacian0(g)))
sp <- genlasso::genlasso(y=div_o,X=G,D=as.matrix(gradop(g)),svd=TRUE)
genlasso::plot.genlasso(sp)
E(g)$sparse <- sp$beta[,150]
} else if(wattr=="elastic") {
# Sparse edges: min_w || div_o(g) - div_r(w) ||_2^2 + lambda || w ||_1
# reconstruct original divergence structure using pruned network
#la <- glmnet::glmnet(divop(g),div_o,alpha=0.1,lambda=lambda)
# penalty to choose small gradient
#la <- glmnet::glmnet(divop(g),div_o,alpha=0.5,lambda=lambda,penalty.factor=W[get.edges(g,E(g))])
la <- glmnet::glmnet(divop(g),div_o,alpha=0.5,lambda=lambda)
#la <- glmnet::glmnet(divop(g),div_o,alpha=1,lambda=lambda,penalty.factor=E(g)$grad)
# conserve original potential
#L0inv <- MASS::ginv(as.matrix(laplacian0(g)))
#la <- glmnet::glmnet(-L0inv%*%divop(g),u,alpha=0.5,lambda=5e-6)
#plot(la)
E(g)$elastic <- drop(la$beta)
} else if(wattr=="neighbour") {
# L2 penalty for connecting distant node pairs
r <- solve(crossprod(divop(g))+0.1*diag(W[get.edges(g,E(g))]),-gradop(g)%*%div_o)
E(g)$neighbour <- drop(r)
}
# remake twice to flip the edges with negative gradient
h <- g %>% remakeg(wattr) %>% remakeg("grad")
matplot(div_o[V(h)$name],cbind(scale(div(g),center=FALSE)[V(h)$name,],div(h)),asp=1,pch=16)
#h <- get.altmat(g,wattr) %>% graph.altmat(1e-6) %>%
#  as_tbl_graph %N>% mutate(group=V(g)$group) %>% filter(degree(.)>0) %>%
#  mutate(div=div(.), u=potential(.,bias)) %E>% mutate(grad=grad(.))
set.seed(333)
#lo <- create_layout(h,"graphopt")
lo <- create_layout(h,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
ggraph(lo)+stat_ellipse(aes(x,y,fill=group,colour=group),type="t",geom="polygon",alpha=0.33)+geom_edge_link(width=0.1,alpha=0.6)+theme_void()+ggsci::scale_colour_d3("category20")+ggsci::scale_fill_d3("category20")
# Gradient tree: gradient is DAG
gggraphc(h,"tree",ewid="grad",vcol="group") +
theme(legend.position="bottom") + ggsci::scale_colour_d3("category20") +
guides(edge_width=guide_legend(ncol=1),colour=guide_legend(nrow=3))
#layout.dfm <- as_tibble(d$Psi[,2:3]) %>% setNames(c("x","y"))
# Determine "source" and "sink" clusters
h %N>% as_tibble %>% count(group,wt=div) %>% arrange(-n)
dd <- h %N>% as_tibble %>% bind_cols(as_tibble(dat$counts))
ggplot(dd,aes(u,div,colour=group))+geom_point()+ggsci::scale_color_d3("category20")+theme_linedraw()#+theme(legend.position="bottom")#+geom_smooth(method="glm",formula=y~x,method.args=list(family="quasipoisson"),colour="black")+coord_trans(y="log1p")
r <- apply(d$Psi[,2:3],2,function(x) {
cen <- sum(range(x))/2
r <- quantile(x,c(.01,.99))
2*(r-cen)+cen
}) %>% as.numeric
den <- with(d,MASS::kde2d(Psi[,2],Psi[,3],n=200,h=2,lims=r))
den$z[-log(den$z)>6] <- exp(-6)
persp(den$x,den$y,-log(den$z),phi=60,theta=45,expand = 0.5,border=NA,col="white",shade=0.3,axes=FALSE,box=FALSE)
gggcirc <- function(g,maxg=3,maxd=1,...,vcol="div")
ggraph(g,"linear",circular=TRUE,...) +
geom_edge_link(
aes(width=grad),
arrow=arrow(length=unit(3,"mm")),
end_cap=circle(2.5,'mm')
) + theme_void() + coord_fixed() +
scale_edge_width(range=c(0,0.6),limits=c(0,maxg)) +
geom_node_point(aes_string(colour=vcol),size=4) +
if(all(get.vertex.attribute(g,vcol) >= 0)) {
viridis::scale_color_viridis(limits=c(0,maxd))
} else {
scale_color_gradient2(low="blue",mid="grey",high="red",limits=c(-maxd,maxd))
}
N <- 9
gb <- combn(1:N,2) %>% t %>% as_tbl_graph %E>%
mutate(weight=rep_len(3:1,ecount(.))) %>% mutate(grad=grad(.)) %N>%
mutate(group=NA) %>% remakeg("grad")
gd <- gb %E>% filter(grad < 2) %>% remakeg("grad")
sp <- glmnet::glmnet(divop(gd),V(gb)$div,alpha=1,lambda=0.1,penalty.factor=E(gd)$grad)
#sp <- glmnet::glmnet(divop(gd),V(gd)$div,alpha=1,lambda=0.1,penalty.factor=E(gd)$grad)
#s <- glmnet::glmnet(-MASS::ginv(as.matrix(laplacian0(a)))%*%divop(a),potential(a),alpha=0.5,lambda=1e-2)
#ga <- gb %E>% mutate(w=drop(sp$beta)) %>% remakeg("w")
ga <- gd %E>% mutate(w=drop(sp$beta)) %>% remakeg("w")
mg <- list(ga,gd,gb) %>% map(edge_attr,"grad") %>% unlist %>% max
md <- list(ga,gd,gb) %>% map(vertex_attr,"div") %>% unlist %>% abs %>% max
mu <- list(ga,gd,gb) %>% map(vertex_attr,"u") %>% unlist %>% max
# Divergence is completely recovered
patchwork::wrap_plots(
gggcirc(gb,mg,md)+ggtitle("Complete")+theme(legend.position="none"),
gggcirc(gd,mg,md)+ggtitle("Dropped")+theme(legend.position="none"),
gggcirc(ga,mg,md)+ggtitle("Recovered")
)
# 0-1 scaled potential
patchwork::wrap_plots(
gb %N>% mutate(ru=u/max(u)) %>% gggcirc(mg,vcol="ru")+ggtitle("Complete") + theme(legend.position="none"),
gd %N>% mutate(ru=u/max(u)) %>% gggcirc(mg,vcol="ru") + ggtitle("Dropped") + theme(legend.position="none"),
ga %N>% mutate(ru=u/max(u)) %>% gggcirc(mg,vcol="ru")+ggtitle("Recovered")
)
V(g)
V(g)$div
V(g)$div %>% head
h <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
V(h)$div %>% head
#wattr <- "shrink"
#wattr <- "sparse"
wattr <- "elastic"
#wattr <- "neighbour"
lambda <- 2e-4
#lambda <- 1e-4
if(wattr=="shrink") {
# Re-estimation of original data (weights) with small lambda*||div(g)||_L2
E(g)$shrink <- drop(solve(diag(ecount(g))+lambda*crossprod(divop(g)),E(g)$weight)) } else if(wattr=="sparse") {
# Re-estimation of original flow with sparse divergence (a.k.a signal approx.)
#sp <- genlasso::genlasso(y=E(g)$weight,D=as.matrix(divop(g)),svd=TRUE)
G <- as.matrix(MASS::ginv(laplacian0(g)))
sp <- genlasso::genlasso(y=div_o,X=G,D=as.matrix(gradop(g)),svd=TRUE)
genlasso::plot.genlasso(sp)
E(g)$sparse <- sp$beta[,150]
} else if(wattr=="elastic") {
# Sparse edges: min_w || div_o(g) - div_r(w) ||_2^2 + lambda || w ||_1
# reconstruct original divergence structure using pruned network
#la <- glmnet::glmnet(divop(g),div_o,alpha=0.1,lambda=lambda)
# penalty to choose small gradient
#la <- glmnet::glmnet(divop(g),div_o,alpha=0.5,lambda=lambda,penalty.factor=W[get.edges(g,E(g))])
la <- glmnet::glmnet(divop(g),div_o,alpha=0.5,lambda=lambda)
#la <- glmnet::glmnet(divop(g),div_o,alpha=1,lambda=lambda,penalty.factor=E(g)$grad)
# conserve original potential
#L0inv <- MASS::ginv(as.matrix(laplacian0(g)))
#la <- glmnet::glmnet(-L0inv%*%divop(g),u,alpha=0.5,lambda=5e-6)
#plot(la)
E(g)$elastic <- drop(la$beta)
} else if(wattr=="neighbour") {
# L2 penalty for connecting distant node pairs
r <- solve(crossprod(divop(g))+0.1*diag(W[get.edges(g,E(g))]),-gradop(g)%*%div_o)
E(g)$neighbour <- drop(r)
}
# remake twice to flip the edges with negative gradient
h <- g %>% remakeg(wattr) %>% remakeg("grad")
matplot(div_o[V(h)$name],cbind(scale(div(g),center=FALSE)[V(h)$name,],div(h)),asp=1,pch=16)
#h <- get.altmat(g,wattr) %>% graph.altmat(1e-6) %>%
#  as_tbl_graph %N>% mutate(group=V(g)$group) %>% filter(degree(.)>0) %>%
#  mutate(div=div(.), u=potential(.,bias)) %E>% mutate(grad=grad(.))
set.seed(333)
#lo <- create_layout(h,"graphopt")
lo <- create_layout(h,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
ggraph(lo)+stat_ellipse(aes(x,y,fill=group,colour=group),type="t",geom="polygon",alpha=0.33)+geom_edge_link(width=0.1,alpha=0.6)+theme_void()+ggsci::scale_colour_d3("category20")+ggsci::scale_fill_d3("category20")
# Gradient tree: gradient is DAG
gggraphc(h,"tree",ewid="grad",vcol="group") +
theme(legend.position="bottom") + ggsci::scale_colour_d3("category20") +
guides(edge_width=guide_legend(ncol=1),colour=guide_legend(nrow=3))
#layout.dfm <- as_tibble(d$Psi[,2:3]) %>% setNames(c("x","y"))
# Determine "source" and "sink" clusters
h %N>% as_tibble %>% count(group,wt=div) %>% arrange(-n)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
dg
h
g
a <- randomalt(10)
a
graph_from_adjacency_matrix(a)
graph_from_adjacency_matrix(a,mode="directed")
graph_from_adjacency_matrix(a,mode="directed",weighted = TRUE)
b <- graph_from_adjacency_matrix(a,mode="directed",weighted = TRUE)
V(b)
E(b)$weighs
E(b)$weigh
E(b)$weight
a
a<0
a[a<0]
a[a<0] <- 0
a
b <- graph_from_adjacency_matrix(a,mode="directed",weighted = TRUE)
b
E(b)$weight
E(b)
A
A[,1]
p$x[,1:3]
p$x[,1:3] %>% head
debugonce(diffusionGraph)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
head(m[,1])
head(Y[,1])
head(Y[,1:10])
head(m[,1:10])
df
dfm
stats::prcomp(t(Y))$x[,1:3] %>% head
j
sigma
dim(R)
npc
Pt
Pt[,1:3] %>% head
M[,1:3] %>% head
M[,1:3] %>% head
Pt[,1:3] %>% head
head(u)
range(u)
roots
uu <- u
uu
head(uu)
head(u)
head(u-uu)
mean(u-uu)
source('~/work/hodge/ddhodge/R/graphConstr.R')
A
source('~/work/hodge/ddhodge/R/graphConstr.R')
w <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
w
w[,1:10] %>% head
W[,1:10] %>% head
head(w-W)
(w-W)^2
mean((w-W)^2)
u
source('~/work/hodge/ddhodge/R/graphConstr.R')
u <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
u
head(u)
head(u)
source('~/work/hodge/ddhodge/R/graphConstr.R')
AA <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7)
AA[,1:3]
AA[,1:3] %>% head
AA - AA
A - AA
(A - AA)^2
mean((A - AA)^2)
AA <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,j=7,k=30)
mean((A - AA)^2)
source('~/work/hodge/ddhodge/R/graphConstr.R')
diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,j=7,k=30) %>% head
div_o %>% head
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7,j=7)
dg
gggraphc(dg,vcol="div")
g
gggraphc(g,vcol="div")
gggraphc(g,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraphc(lo,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7,j=7)
dg
as_tbl_graph(dg)
as_tbl_graph(dg) %>% gggraphc(vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg
diffusionGraph
graph_altmat
E(dg)$weight
range(E(dg)$weight)
range(E(dg)$weight^1)
range(E(dg)$weight^2)
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=7,j=7)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg
h
E(h)$grad
E(h)$grad %>% head
E(dg)$grad %>% head
V(dg)$div %>% head
V(g)$div %>% head
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
dg
as_tbl_graph(dg)
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
dg
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg
E(dg)$weight
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
dg
E(dg)
E(dg)$weight
E(dg)$weight %>% range
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
E(dg)$div <- div(dg)
div(dg)
V(dg)$div <- div(dg)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
get.altmat(dg)
get.altmat(dg) - t(get.altmat(dg))
B <- graph_altmat(get.altmat(dg) - t(get.altmat(dg)))
B
divop(dg)
divop(dg)[1:10,1:10]
remakeg
?get.adjacency
as_adj(dg)
as_adj(dg,attr="weights")
as_adj(dg,attr="weight")
source('~/work/hodge/ddhodge/R/graphConstr.R')
177504120/4
source('~/work/hodge/ddhodge/R/graphConstr.R')
as_altmat(dg)
547217444/4
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
?igraph::edge.attributes
?igraph::`vertex.attributes<-`
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
source('~/work/hodge/ddhodge/R/graphConstr.R')
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
dg
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=10)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,sigma=200)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(dg)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=200)
gggraph(dg)
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(dg)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11)
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11)
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraph(dg)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraphc(dg,vcol="potential")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraphc(dg,vcol="u")+scale_color_gradient2(low="blue",mid="grey",high="red")
plot(potential(dg))
plot(potential(dg),div(dg))
plot(div(dg),potential(dg))
plot(div(dg),potential(dg),log+"y")
plot(div(dg),potential(dg),log=\"y")
plot(div(dg),potential(dg),log="y")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=3,k=11)
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraphc(dg,vcol="u")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraph(dg)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=2,k=11)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1.2,k=11)
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
gggraphc(dg,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraph(dg)
lo <- create_layout(h,"nicely")
lo <- create_layout(dg,"nicely")
gggraph(dg)
gggraph(lo)
gggraphc(lo,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraph(lo)
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=200);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
plot(div(dg),div_o)
div_o <- A %>% graph.altmat %>% div %>% scale(center=FALSE) %>% drop
plot(div(dg),div_o)
div_o <- A %>% graph_altmat %>% div %>% scale(center=FALSE) %>% drop
plot(div(dg),div_o)
?difusionGraph
?diffusionGraph
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
devtools::install(build_vignettes = TRUE)
library(ddhodge)
X <- dyno::fibroblast_reprogramming_treutlein$counts
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=200);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg
div(dg)
potential(dg)
potential(dg) %>% range
potential(dg)
plot(X[,1])
plot(X[,1])
plot(X[,2])
head(X[,2])
head(X[order(potential(dg)),1])
plot(X[order(potential(dg)),1])
plot(X[order(potential(dg)),"Neurod1"])
X[order(potential(dg)),"Neurod1"]
dim(X)
dimnames(X)
head(X[,1:3]
)
head(X[,1:3])
X[order(potential(dg)),"Tmem30a"]
plot(X[order(potential(dg)),"Tmem30a"])
matplot(X[order(potential(dg)),1:100],type="l")
matplot(scale(X[order(potential(dg)),1:100]),type="l")
matplot(scale(X[order(potential(dg)),1:1000]),type="l")
matplot(scale(X[order(potential(dg)),c(1,3,9)]),type="l")
matplot(scale(log(X)[order(potential(dg)),c(1,3,9)]),type="l")
matplot(scale(log(X+1)[order(potential(dg)),c(1,3,9)]),type="l")
matplot(scale(log(X+0.1)[order(potential(dg)),c(1,3,9)]),type="l")
matplot(scale(log(X+1)[order(potential(dg)),c(1,3,9)]),type="l")
matplot(scale(log(X+1)[order(potential(dg)),c("Cnn2")]),type="l")
matplot(scale(log(X+1)[order(potential(dg)),c("Cnn2","Tpm4")]),type="l")
matplot(scale(log(X+1)[order(potential(dg)),c("Cnn2","Tpm4","Acta1")]),type="l")
matplot(scale((X+1)[order(potential(dg)),c("Cnn2","Tpm4","Acta1")]),type="l")
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1")]),type="l")
matplot(scale(X[order(div(dg)),c("Cnn2","Tpm4","Acta1")]),type="l")
matplot(scale(X[order(-div(dg)),c("Cnn2","Tpm4","Acta1")]),type="l")
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1")]),type="l")
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uhcl1")]),type="l")
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="l")
range(X)
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="l")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="l")
matplot(sort(div(dg)),scale(X[order(div(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="l")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="l")
gggraphc
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="b")
matplot(sort(potential(dg)),(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="b")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="b")
matplot(sort(potential(dg)),scale(X[order(potential(dg),center=FALSE),c("Cnn2","Tpm4","Acta1","Uchl1")]),type="b")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="b")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="p")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="s")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="h")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="l")
matplot(sort(potential(dg)),scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="h")
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="h")
matplot(scale(X[order(potential(dg)),c("Cnn2","Tpm4","Acta1","Uchl1")],center=FALSE),type="l")
dg
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=200);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=20);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=100);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,sigma=40);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=10,k=11,sigma=40);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=10,k=11,sigma=40);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=3,k=11,sigma=40);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=3,k=11,sigma=80);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=2,k=11,sigma=80);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=2,k=11,j=3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,j=3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=20,j=3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=20,j=7);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,j=7);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=7);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=10);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=10,lambda=1e-);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=10,lambda=1e-3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=30,j=10,lambda=1e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,j=10,lambda=1e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,j=10,lambda=0);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=0);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=1);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=2);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=0.8);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=0.01);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=1e-3);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=1e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=21,lambda=1e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=21,lambda=5e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=17,lambda=2e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=2e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=1e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=1e-5);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=17,lambda=2e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
dg
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=2e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF",s=1,k=11,lambda=1e-4);igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
source('~/work/hodge/ddhodge/R/graphConstr.R')
dg <- diffusionGraph(t(dyno::fibroblast_reprogramming_treutlein$counts),roots=dyno::fibroblast_reprogramming_treutlein$grouping=="MEF");igraph::V(dg)$group <- dyno::fibroblast_reprogramming_treutlein$grouping;lo <- create_layout(dg,"nicely")
source('~/work/hodge/ddhodge/R/graphConstr.R')
patchwork::wrap_plots(
gggraph(lo,"grad")+ggtitle("Gradient"),
gggraphc(lo,vcol="div",vsize="div^2") +
scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence"),
#gggraphc(lo,vcol="u") + viridis::scale_color_viridis() + ggtitle("Potential"),
nrow=2
)
drop0
?drop0
source('~/work/hodge/ddhodge/R/graphConstr.R')
?glmnet
source('~/work/hodge/ddhodge/R/graphConstr.R')
source('~/work/hodge/ddhodge/R/graphConstr.R')
BiocManager::install(update=TRUE,ask=FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
source("/home/guestA/n70275b/work/rscripts/geomNorm.R")
# Helper functions
ggpoints <- function(x,...)
ggplot(x,...) + geom_point(size=3,stroke=1) +
ggrepel::geom_text_repel(size=4) + theme_minimal() + mycolor
print(sessionInfo(),locale=FALSE)
select <- dplyr::select
# Files
yanai96 <-  "/home/share/db/barcodes/yanaiCS96.txt"
deftable <- "/home/guestA/n70275b/work/komatsu/hyperp/deftable_komatsu.txt"
## Data selection (filter rows of deftable)
#use <- quo(!grepl("^18",group) & (group != "Nc-minusTryd"))
#use <- quo(TRUE) # use all
#use <- quo(!grepl("4mix",mix))
#use <- quo(grepl("4mix",mix) & type!="Wt")
use <- quo(grepl("4mix",mix))
# Species
biomartann <- "mmusculus_gene_ensembl"
maxchrom <- 19 # 19: mouse, 22: human
# Graphics
# aestetic mapping of labels
#myaes <- aes(colour=interaction(type,mix),shape=EGFP,label=factor(lot))
myaes <- aes(colour=type,shape=EGFP,label=factor(lot))
# color palette of points: See vignette("ggsci")
#mycolor <- ggsci::scale_color_aaas()
mycolor <- ggsci::scale_color_d3("category20") # color palette of points
# PCA/tSNE
scalerows <- FALSE # gene-wise scaling (pattern is the matter?)
#scalerows <- TRUE # gene-wise scaling (pattern is the matter?)
seed <- 123 # set another number if tSNE looks not good
perprexity <- 3 # expected cluster size in tSNE
# DESeq2
model <- ~type*EGFP
fdr <- 0.1 # acceptable false discovery rate
lfcthreth <- log2(1.1) # threshold in abs(log2FC)
# controls should be placed in the right
contrast <- list(
#type_3xNLS = c("type", "3xNLS", "Wt"),
Intercept = list("Intercept"), # interaction
type_H3.3   = c("type", "H3.3",   "3xNLS"),
type_H3mm7  = c("type", "H3mm7",  "3xNLS"),
type_H3mm13 = c("type", "H3mm13", "3xNLS"),
type_H3mm18 = c("type", "H3mm18", "3xNLS"),
EGFP_High = c("EGFP", "High", "no"),
EGFP_Low  = c("EGFP", "Low", "no"),
H3mm13High = list("typeH3mm13.EGFPHigh"), # interaction
H3mm18High = list("typeH3mm18.EGFPHigh") # interaction
)
# GSEA
orgdb <- org.Mm.eg.db::org.Mm.eg.db
if(!exists("e2g")){
ensembl <- biomaRt::useMart("ENSEMBL_MART_ENSEMBL",host="asia.ensembl.org")
mart <- biomaRt::useDataset(biomartann,mart=ensembl)
e2g <- biomaRt::getBM(attributes=c("ensembl_gene_id","external_gene_name",
"gene_biotype","chromosome_name"), mart=mart) %>% as_tibble %>%
rename(
ens_gene = ensembl_gene_id,
ext_gene = external_gene_name,
biotype = gene_biotype,
chr = chromosome_name
)
}
if(!exists("e2g")){
ensembl <- biomaRt::useMart("ENSEMBL_MART_ENSEMBL",host="asia.ensembl.org")
mart <- biomaRt::useDataset(biomartann,mart=ensembl)
e2g <- biomaRt::getBM(attributes=c("ensembl_gene_id","external_gene_name",
"gene_biotype","chromosome_name"), mart=mart) %>% as_tibble %>%
rename(
ens_gene = ensembl_gene_id,
ext_gene = external_gene_name,
biotype = gene_biotype,
chr = chromosome_name
)
}
e2g
cs96 <- readr::read_tsv(yanai96) %>% rename(barcode=1)
def <- readr::read_tsv(deftable) %>% filter(!!use) %>%
inner_join(cs96,by="barcode") %>% rename(cell=sequence)
for(x in keep(contrast,is.character))
def[[x[1]]] <- relevel(factor(def[[x[1]]]),x[3])
umi <- def$file %>% unique %>% tibble(file=.) %>%
mutate(data=map(file,readr::read_tsv,progress=FALSE)) %>%
unnest() %>%
inner_join(select(def,file,cell,sample),.,c("file","cell")) %>%
select(-file,-cell) %>% rename(ens_gene=gene)
mat <- umi %>% right_join(e2g,.,by="ens_gene") %>%
mutate(chr=factor(chr,c(1:maxchrom,"X","Y","MT"))) %>%
filter(!is.na(chr)) %>% spread(sample,count,fill=0)
print(def)
umi
m1 <- readr::read_tsv("~/work/komatsu/hyperp/bam/NIH3T3-mix1-mix4.counts.txt.gz",col_names = FALSE)
m1
m1 <- readr::read_tsv("~/work/komatsu/hyperp/bam/NIH3T3-mix1-mix4.counts.txt.gz",col_names = c("cell","umi","ens_gene","raw")
m1 <- readr::read_tsv("~/work/komatsu/hyperp/bam/NIH3T3-mix1-mix4.counts.txt.gz",col_names = c("cell","umi","ens_gene","raw"))
m1
m1 %>% arrange(-raw)
def <- readr::read_tsv(deftable) %>% filter(!!use) %>%
inner_join(cs96,by="barcode") %>% rename(cell=sequence)
yanai96 <-  "/home/share/db/barcodes/yanaiCS96.txt"
deftable <- "/home/guestA/n70275b/work/komatsu/hyperp/deftable_komatsu.txt"
cs96 <- readr::read_tsv(yanai96) %>% rename(barcode=1)
def <- readr::read_tsv(deftable) %>% filter(!!use) %>%
inner_join(cs96,by="barcode") %>% rename(cell=sequence)
def <- readr::read_tsv(deftable) %>%
inner_join(cs96,by="barcode") %>% rename(cell=sequence)
def
def %>% filter(grepl("mix1-4",file))
def %>% filter(grepl("mix1-mix4",file))
def %>% filter(grepl("mix1-mix4",file)) %>% dim
def %>% filter(grepl("mix1-mix4",file)) %>% pull(file)
def <- def %>% filter(grepl("mix1-mix4",file)) %>% select(-file)
def
m11 <- left_join(def,m1)
m11
m111 <- m11 %>% group_by(sample) %>% summarise(umi=n(),raw=sum(raw))
m111
m111 <- m11 %>% group_by(sample,ens_gene) %>% summarise(umi=n(),raw=sum(raw))
m111
m111 <- m11 %>% group_by(sample,ens_gene) %>% summarise(umi=n(),raw=sum(raw)) %>% left_join(e2g,.)
ensembl <- biomaRt::useMart("ENSEMBL_MART_ENSEMBL",host="asia.ensembl.org")
mart <- biomaRt::useDataset(biomartann,mart=ensembl)
e2g <- biomaRt::getBM(attributes=c("ensembl_gene_id","external_gene_name",
"gene_biotype","chromosome_name"), mart=mart) %>% as_tibble %>%
rename(
ens_gene = ensembl_gene_id,
ext_gene = external_gene_name,
biotype = gene_biotype,
chr = chromosome_name
)
biomartann <- "mmusculus_gene_ensembl"
ensembl <- biomaRt::useMart("ENSEMBL_MART_ENSEMBL",host="asia.ensembl.org")
mart <- biomaRt::useDataset(biomartann,mart=ensembl)
e2g <- biomaRt::getBM(attributes=c("ensembl_gene_id","external_gene_name",
"gene_biotype","chromosome_name"), mart=mart) %>% as_tibble %>%
rename(
ens_gene = ensembl_gene_id,
ext_gene = external_gene_name,
biotype = gene_biotype,
chr = chromosome_name
)
m111 <- m11 %>% group_by(sample,ens_gene) %>% summarise(umi=n(),raw=sum(raw)) %>% left_join(e2g,.)
m111
m111 %>% arrange(-raw)
m111 %>% group_by(sample) %>% top_n(100,raw) %>% View
m111 %>% count(sample,chr,wt=raw)
m111 %>% count(sample,chr,wt=raw)
m111 %>% count(sample,chr,wt=raw) %>% arrange(-n)
m111 %>% count(sample,chr,wt=raw) %>% mutate(p=n/sum(n))
m111 %>% count(sample,chr,wt=raw) %>% mutate(p=n/sum(n)) %>% arrange(-p)
m111 %>% count(sample,chr,wt=raw) %>% group_by(sample) %>%  mutate(p=n/sum(n)) %>% arrange(-p)
m111 %>% count(sample,chr,wt=raw) %>% group_by(sample) %>%  mutate(p=n/sum(n)) %>% arrange(-p) %>% View
devtools::install(build_vignettes = TRUE)
?diffusionGraph
devtools::install(build_vignettes = TRUE)
?diffusionGraph
?diffusionGraph
devtools::install(build_vignettes = TRUE)
?diffusionGraph
usethis::use_spell_check()
install.packages("spelling")
usethis::use_spell_check()
usethis::check()
devtools::check()
usethis::use_package("glmnet")
devtools::check()
devtools::inst()
devtools::install()
?diffusionGraph
devtools::install()
?diffusionGraph
devtools::install()
?diffusionGraph
devtools::build()
devtools::install()
?diffusionGraph
?diffusionGraph
library(ddhodge)
?diffusionGraph
devtools::install()
?diffusionGraph
library(ddhodge)
?diffusionGraph
devtools::check()
?diffusionGraph
devtools::check()
usethis::use_readme_rmd()
devtools::check()
devtools::install()
usethis::use_readme_md()
devtools::install_githubs("kazumits/ddhodge")
devtools::install_github("kazumits/ddhodge")
group
a <- readr::read_rds("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds")
a <- readRDS("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds")
browseVignettes("ddhodge")
vignettes("ddhodge")
vignette("ddhodge")
usethis::use_readme_rmd
usethis::use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(ggraph)
X <- dyno::fibroblast_reprogramming_treutlein$counts
group <- dyno::fibroblast_reprogramming_treutlein$grouping
g <- diffusionGraph(X,roots=(group=="MEF"))
library(ggraph)
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
g <- diffusionGraph(X,roots=(group=="MEF"))
X
group
group=="MEF"
diffusionGraph(X,group=="MEF")
X
diffusionGraph
log(gscale(X + 1))
diffusionGraph(X,group=="MEF")
debugonce(diffusionGraph)
diffusionGraph(X,group=="MEF")
dim(Y)
dim(Y)
Y
u
g
la
la
debugonce(as_altmat)
as_altmat <- function(g,attr="weight") {
if(igraph::ecount(g)==0)
return(matrix(0,igraph::vcount(g),igraph::vcount(g)))
A <- igraph::as_adj(g,attr=attr)
A - t(A)
}
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
g <- diffusionGraph(X,roots=(group=="MEF"))
g
g
source('~/work/hodge/ddhodge/R/graphConstr.R')
devtools::check()
library(ddhodge)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(ggraph)
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
g <- diffusionGraph(X,group=="MEF")
igraph::V(dg)$group <- group
library(ggraph)
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
g <- diffusionGraph(X,group=="MEF")
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
gggraph(lo,"grad") + ggtitle("Gradient")
library(ddhodge)
library(ggraph)
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
g <- diffusionGraph(X,group=="MEF")
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
gggraph(lo,"grad") + ggtitle("Gradient")
library(ddhodge)
library(ggraph)
library(ggsci)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization example
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization example
set.seed(123)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization example
set.seed(111)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization example
igraph::V(g)$group <- group
set.seed(111)
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization example
set.seed(111)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(1)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(0)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(333)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(333)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(33)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(g) + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
#gggraphc(lo,vcol="div",vsize="div^2") + scale_color_gradient2(low="blue",mid="grey",high="red") + ggtitle("Divergence")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(33)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(lo) + ggtitle("Gradient") + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
ggraph(lo) + ggtitle("Divergence") + theme_void() +
geom_edge_link(
aes(width=weight),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=div,size=div^2)) +
scale_color_gradient2(low="blue",mid="grey",high="red")
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(33)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
pg <- ggraph(lo) + ggtitle("Gradient") + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
pd <- ggraph(lo) + ggtitle("Divergence") + theme_void() +
geom_edge_link(
aes(width=weight),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=div,size=div^2)) +
scale_color_gradient2(low="blue",mid="grey",high="red")
pg + pd
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization
set.seed(33)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
pg <- ggraph(lo) + ggtitle("Gradient") + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
pd <- ggraph(lo) + ggtitle("Divergence") + theme_void() +
geom_edge_link(
aes(width=weight),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=div,size=div^2)) +
scale_color_gradient2(low="blue",mid="grey",high="red")
print(pg + pd)
pg
list(pg,pd)
pg+pd
pd+pg
ggplot_add(pg,pd)
ggplot_add(pg)
?patchwork
?ggraph
library(ddhodge)
library(ggsci)
library(ggraph)
# fibrablast reprogramming data
X <- t(dyno::fibroblast_reprogramming_treutlein$counts)
group <- dyno::fibroblast_reprogramming_treutlein$grouping
# ddhode part: specify input data and roots
g <- diffusionGraph(X,group=="MEF")
# visualization using ggraph package
set.seed(33)
igraph::V(g)$group <- group
lo <- create_layout(g,"nicely")
ggraph(lo) + ggtitle("Gradient") + theme_void() +
geom_edge_link(
aes(width=weight),
colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=group),size=2) +
scale_color_d3("category20")
ggraph(lo) + ggtitle("Divergence") + theme_void() +
geom_edge_link(
aes(width=weight),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes(colour=div,size=div^2)) +
scale_color_gradient2(low="blue",mid="grey",high="red")
div(g)
plot(div(g))
?`ggsci-package`
pal_d3(11)
pal_d3()
pal_d3(24)
pal_d3("category20")
pal_d3("category20")(12)
pal_d3("category20")
length(unique(group))
pal <- pal_d3("category20")(length(unique(group)))
plot(div(g),potential(g),col=pal[factor(group)])
plot(div(g),potential(g),col=pal[factor(group)],pch=16)
g
div(g)
potential(g)
gradop(g)
qr(gradop(g))
rank(gradop(g))
qr(gradop(g))
svd(gradop(g))$d %>% head
svd(gradop(g))$d %>% tail
svd(curlop(g))$d %>% tail
acurlop(g)
C
dc <- curlop(g)
dc
dc%*%V(g)$weight
dc%*%E(g)$weight
dc%*%E(g)$weight %>% plot
dim(dc)
g
t(dc)
plot(dc)
image(dc,useRaster=TRUE)
L1 <- laplacian1(g)
laplacian1
tcrossprod(gradop(g))
crossprod(curlop(g))
L1 <- laplacian1(g)
laplacian1(g)
laplacian0(g)
laplacian0
devtools::check()
L1 <- laplacian1(g)
L1
svd(L1)$d %>% head
svd(L1)$d %>% plot
eigen(L1)
eig <- eigen(L1)
eig$values
eig$values %>% tail
eig$values %>% tail(100)
sum(abs(eig$values) < 1e-8)
sum(abs(eig$values) > 1e-8)
eig$vec[,1]
eig$vec[1,]
eig$vec %>% dim
eig$vec[,1]
eig$vec[,1] %>% plot
eig$vec[,1] %>% plot(type="h",col=pal[factor(group)])
eig$vec[,1] %>% plot(type="p")
eig$vec[,1] %>% plot(type="l")
eig$vec[,1] %>% plot(type="l",col=pal[factor(group)])
eig$vec[,1] %>% plot(type="h",col=pal[factor(group)])
eig$vec[1500:2500,1] %>% plot(type="h",col=pal[factor(group)])
eig$vec[1500:2400,1] %>% plot(type="h",col=pal[factor(group)])
eig$vec[1500:2500,2] %>% plot(type="h",col=pal[factor(group)])
eig$vec[1500:2400,2] %>% plot(type="h",col=pal[factor(group)])
eig$vec[,1:2] %>% plot(type="p",pch=16,col=pal[factor(group)])
eig$vec[1500:2400,2] %>% plot(type="h",col=pal[factor(group)])
eig$vec[1500:2400,1:3] %>% plot.ts(type="h",col=pal[factor(group)])
eig$vec[1500:2400,1:10] %>% plot.ts(type="h",col=pal[factor(group)])
L0 <- laplacian0(g)
L0
eigen(L0)
e0 <- eigen(L0)
e0$values
e0$values %>% head
e0$vec[,1]
e0$vec[,1] %>% plot
e0$vec[1500:2400,1:10] %>% plot.ts(type="h",col=pal[factor(group)])
e0$vec[,1:10] %>% plot.ts(type="h",col=pal[factor(group)])
?connections
read_tsv(url("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE67310&format=file&file=GSE67310%5FiN%5Fdata%5Flog2FPKM%5Fannotated%2Etxt%2Egz"))
readr::read_tsv(url("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE67310&format=file&file=GSE67310%5FiN%5Fdata%5Flog2FPKM%5Fannotated%2Etxt%2Egz"))
readr::read_rds(url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds?download=1"))
readr::read_rds(url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
read.rds(url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(file("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
?readRDS
readRDS(file=url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(file="https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds")
readRDS(file=file("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds")
readLines(url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(file=url("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(getUrl("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
readRDS(getURL("https://zenodo.org/record/1443566/files/real/silver/fibroblast-reprogramming_treutlein.rds"))
usethis::use_github()
usethis::use_github()
N <- 9
gb <- combn(1:N,2) %>% t %>% as_tbl_graph %E>%
mutate(weight=rep_len(3:1,ecount(.))) %>% mutate(grad=grad(.)) %N>%
mutate(group=NA) %>% remakeg("grad")
gd <- gb %E>% filter(grad < 2) %>% remakeg("grad")
sp <- glmnet::glmnet(divop(gd),V(gb)$div,alpha=1,lambda=0.1,penalty.factor=E(gd)$grad)
#sp <- glmnet::glmnet(divop(gd),V(gd)$div,alpha=1,lambda=0.1,penalty.factor=E(gd)$grad)
#s <- glmnet::glmnet(-MASS::ginv(as.matrix(laplacian0(a)))%*%divop(a),potential(a),alpha=0.5,lambda=1e-2)
#ga <- gb %E>% mutate(w=drop(sp$beta)) %>% remakeg("w")
ga <- gd %E>% mutate(w=drop(sp$beta)) %>% remakeg("w")
mg <- list(ga,gd,gb) %>% map(edge_attr,"grad") %>% unlist %>% max
md <- list(ga,gd,gb) %>% map(vertex_attr,"div") %>% unlist %>% abs %>% max
mu <- list(ga,gd,gb) %>% map(vertex_attr,"u") %>% unlist %>% max
# Divergence is completely recovered
patchwork::wrap_plots(
gggcirc(gb,mg,md)+ggtitle("Complete")+theme(legend.position="none"),
gggcirc(gd,mg,md)+ggtitle("Dropped")+theme(legend.position="none"),
gggcirc(ga,mg,md)+ggtitle("Recovered")
)
#library(dyno)
library(tidygraph)
library(ggraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
source("~/work/rscripts/geomNorm.R")
source("~/work/hodge/HodgeRank.R")
source("~/work/rscripts/diffusionMap.R")
knn <- function(x,k) rank(x,ties="max") %>% { . <= k+1 & . > 1}
ggpoints <- function(...)
ggplot(...) + geom_point() + coord_fixed() + theme_linedraw() +
ggsci::scale_color_d3("category20")
gggraph <- function(...,ewid="weight",vcol="group")
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol),size=2) +
#geom_node_point(aes_string(colour=vcol,size=vsize))
ggsci::scale_color_d3("category20")
gggraphc <- function(...,ewid="weight",vcol="u",vsize=NULL)
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol,size=vsize))
remakeg <- function(g,eattr="grad",tol=1e-6)
get.altmat(g,eattr) %>% graph.altmat(tol) %>% as_tbl_graph %N>%
mutate(group=V(g)$group) %>% filter(degree(.)>0) %>%
mutate(div=div(.), u=potential(.)) %E>% mutate(grad=grad(.))
gggcirc <- function(g,maxg=3,maxd=1,...,vcol="div")
ggraph(g,"linear",circular=TRUE,...) +
geom_edge_link(
aes(width=grad),
arrow=arrow(length=unit(3,"mm")),
end_cap=circle(2.5,'mm')
) + theme_void() + coord_fixed() +
scale_edge_width(range=c(0,0.6),limits=c(0,maxg)) +
geom_node_point(aes_string(colour=vcol),size=4) +
if(all(get.vertex.attribute(g,vcol) >= 0)) {
viridis::scale_color_viridis(limits=c(0,maxd))
} else {
scale_color_gradient2(low="blue",mid="grey",high="red",limits=c(-maxd,maxd))
}
N <- 9
gb <- combn(1:N,2) %>% t %>% as_tbl_graph %E>%
mutate(weight=rep_len(3:1,ecount(.))) %>% mutate(grad=grad(.)) %N>%
mutate(group=NA) %>% remakeg("grad")
gd <- gb %E>% filter(grad < 2) %>% remakeg("grad")
sp <- glmnet::glmnet(divop(gd),V(gb)$div,alpha=1,lambda=0.1,penalty.factor=E(gd)$grad)
#sp <- glmnet::glmnet(divop(gd),V(gd)$div,alpha=1,lambda=0.1,penalty.factor=E(gd)$grad)
#s <- glmnet::glmnet(-MASS::ginv(as.matrix(laplacian0(a)))%*%divop(a),potential(a),alpha=0.5,lambda=1e-2)
#ga <- gb %E>% mutate(w=drop(sp$beta)) %>% remakeg("w")
ga <- gd %E>% mutate(w=drop(sp$beta)) %>% remakeg("w")
mg <- list(ga,gd,gb) %>% map(edge_attr,"grad") %>% unlist %>% max
md <- list(ga,gd,gb) %>% map(vertex_attr,"div") %>% unlist %>% abs %>% max
mu <- list(ga,gd,gb) %>% map(vertex_attr,"u") %>% unlist %>% max
# Divergence is completely recovered
patchwork::wrap_plots(
gggcirc(gb,mg,md)+ggtitle("Complete")+theme(legend.position="none"),
gggcirc(gd,mg,md)+ggtitle("Dropped")+theme(legend.position="none"),
gggcirc(ga,mg,md)+ggtitle("Recovered")
)
# 0-1 scaled potential
patchwork::wrap_plots(
gb %N>% mutate(ru=u/max(u)) %>% gggcirc(mg,vcol="ru")+ggtitle("Complete") + theme(legend.position="none"),
gd %N>% mutate(ru=u/max(u)) %>% gggcirc(mg,vcol="ru") + ggtitle("Dropped") + theme(legend.position="none"),
ga %N>% mutate(ru=u/max(u)) %>% gggcirc(mg,vcol="ru")+ggtitle("Recovered")
)
pal <- ggsci::pal_d3("category20")(nlevels(labf))
#library(dyno)
library(tidygraph)
library(ggraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
source("~/work/rscripts/geomNorm.R")
source("~/work/hodge/HodgeRank.R")
source("~/work/rscripts/diffusionMap.R")
knn <- function(x,k) rank(x,ties="max") %>% { . <= k+1 & . > 1}
ggpoints <- function(...)
ggplot(...) + geom_point() + coord_fixed() + theme_linedraw() +
ggsci::scale_color_d3("category20")
gggraph <- function(...,ewid="weight",vcol="group")
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol),size=2) +
#geom_node_point(aes_string(colour=vcol,size=vsize))
ggsci::scale_color_d3("category20")
gggraphc <- function(...,ewid="weight",vcol="u",vsize=NULL)
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol,size=vsize))
remakeg <- function(g,eattr="grad",tol=1e-6)
get.altmat(g,eattr) %>% graph.altmat(tol) %>% as_tbl_graph %N>%
mutate(group=V(g)$group) %>% filter(degree(.)>0) %>%
mutate(div=div(.), u=potential(.)) %E>% mutate(grad=grad(.))
dat <- dyno::fibroblast_reprogramming_treutlein
dat$root_milestone_id <- "MEF"
dat$group_ids <- c("MEF","d2_induced","d2_intermediate","d5_earlyMyocyte","d5_intermediate","d5_earlyiN","d5_failedReprog","Neuron","Myocyte","d22_failedReprog")
#dat <- readr::read_rds("~/work/hodge/dynodata/dentate-gyrus-neurogenesis_hochgerner.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/mesoderm-development_loh.rds")
# dataset is zenodo is too clean???
#dat <- readr::read_rds("~/work/hodge/dynodata/fibroblast-reprogramming_treutlein.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/myoblast-differentiation_trapnell.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/mESC-differentiation_hayashi.rds")
#dat <- readr::read_rds("~/work/hodge/dynodata/hematopoiesis-clusters_olsson.rds")
#labf <- factor(dat$grouping,c
#dat$counts <- t(m)
#dat$root_milestone_id <- "HighHigh"
#dat$group_ids <- c("HighLow","HighHigh","LowHigh","LowLow")
#dat$group_ids <- c("High","Low")
#marker <- m["CT010467.1",]
#dat$grouping <-ifelse(marker > quantile(marker,0.95),"High","Low")
#dat$grouping <- m[c("Prm1","CT010467.1"),] %>% apply(1,function(x) ifelse(x > quantile(x,0.9),"High","Low")) %>% apply(1,paste0,collapse="")
#dat$grouping <- m[c("Prm1","Tram1"),] %>% apply(1,function(x) ifelse(x > quantile(x,0.9),"High","Low")) %>% apply(1,paste0,collapse="")
labf <- factor(dat$grouping,dat$group_ids)
root <- dat$root_milestone_id
ncomp <- min(1000,length(labf))
m <- dat$count %>% t %>% {gscale(.+1)} %>% log
#m <- dat$expression %>% t %>% {log(.+1)}
p <- prcomp(t(m))
R <- dist(p$x[,1:ncomp]) %>% as.matrix
set.seed(111)
df <- bind_cols(group=labf,as_tibble(p$x))
ggpoints(df,aes(PC1,PC2,colour=group))
#tsne <- Rtsne::Rtsne(p$x[,1:ncomp],theta=0.5,pca=FALSE,perp=30)
tsne <- Rtsne::Rtsne(p$x[,1:ncomp],theta=0.5,pca=FALSE,perp=20)
df <- tsne$Y %>% as_tibble %>% rename(tSNE1=1,tSNE2=2) %>% bind_cols(df,.)
ggpoints(df,aes(tSNE1,tSNE2,colour=group))
pal <- ggsci::pal_d3("category20")(nlevels(labf))
usecurl <- FALSE
bias <- 0
alpha <- 2
s <- 1
nc <- 10
d <- dfm(R,k=7,alpha=alpha,truncate=FALSE)
#d <- dfm(R,sigma=200,alpha=alpha,truncate=FALSE)
pairs(p$x[,2:5],col=sub("FF$","66",pal[labf]),pch=16,cex=0.8,asp=1)
plot.dfm(d,2:5,s=s,col=sub("FF$","66",pal[labf]))
W <- as.matrix(dist((d$Psi%*%diag(d$eig^s))[,seq(2,nc+1)]))
Pt <- d$Psi%*%diag(d$eig^s)%*%t(d$Phi)
# Energy at s step started from root cells (ensemble):
#   equiv. to start the process from v=(1/m,1/m,..,1/m,0,0,....)
u <- -log(colMeans(Pt[labf==root,,drop=FALSE]))
#u <- -log(d$Phi[,1]) # equibulium
#u <- colMeans(Pt[labf==root,,drop=FALSE])
#A <- sign(outer(u,u,"-"))
# negate gradient to espcape potential well
#A <- t(outer(u,u,"-"))
A <- t(outer(u,u,"-"))/W; diag(A) <- 0
#A <- totalflow(d)
dimnames(A) <- dimnames(R)
div_o <- A %>% graph.altmat %>% div %>% scale(center=FALSE) %>% drop
og <- grah.altmat(A)
#library(dyno)
library(tidygraph)
library(ggraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
source("~/work/rscripts/geomNorm.R")
source("~/work/hodge/HodgeRank.R")
source("~/work/rscripts/diffusionMap.R")
knn <- function(x,k) rank(x,ties="max") %>% { . <= k+1 & . > 1}
ggpoints <- function(...)
ggplot(...) + geom_point() + coord_fixed() + theme_linedraw() +
ggsci::scale_color_d3("category20")
gggraph <- function(...,ewid="weight",vcol="group")
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol),size=2) +
#geom_node_point(aes_string(colour=vcol,size=vsize))
ggsci::scale_color_d3("category20")
gggraphc <- function(...,ewid="weight",vcol="u",vsize=NULL)
ggraph(...) + theme_void() +
geom_edge_link(
aes_string(width=ewid),colour="black",
arrow=arrow(length=unit(1.2,"mm")),
end_cap = circle(1.2,'mm'), alpha=0.6,
) + scale_edge_width(range=c(0.2,0.8)) +
geom_node_point(aes_string(colour=vcol,size=vsize))
remakeg <- function(g,eattr="grad",tol=1e-6)
get.altmat(g,eattr) %>% graph.altmat(tol) %>% as_tbl_graph %N>%
mutate(group=V(g)$group) %>% filter(degree(.)>0) %>%
mutate(div=div(.), u=potential(.)) %E>% mutate(grad=grad(.))
pal <- ggsci::pal_d3("category20")(nlevels(labf))
usecurl <- FALSE
bias <- 0
alpha <- 2
s <- 1
nc <- 10
d <- dfm(R,k=7,alpha=alpha,truncate=FALSE)
#d <- dfm(R,sigma=200,alpha=alpha,truncate=FALSE)
pairs(p$x[,2:5],col=sub("FF$","66",pal[labf]),pch=16,cex=0.8,asp=1)
plot.dfm(d,2:5,s=s,col=sub("FF$","66",pal[labf]))
W <- as.matrix(dist((d$Psi%*%diag(d$eig^s))[,seq(2,nc+1)]))
Pt <- d$Psi%*%diag(d$eig^s)%*%t(d$Phi)
# Energy at s step started from root cells (ensemble):
#   equiv. to start the process from v=(1/m,1/m,..,1/m,0,0,....)
u <- -log(colMeans(Pt[labf==root,,drop=FALSE]))
#u <- -log(d$Phi[,1]) # equibulium
#u <- colMeans(Pt[labf==root,,drop=FALSE])
#A <- sign(outer(u,u,"-"))
# negate gradient to espcape potential well
#A <- t(outer(u,u,"-"))
A <- t(outer(u,u,"-"))/W; diag(A) <- 0
#A <- totalflow(d)
dimnames(A) <- dimnames(R)
div_o <- A %>% graph.altmat %>% div %>% scale(center=FALSE) %>% drop
og <- grah.altmat(A)
pal <- ggsci::pal_d3("category20")(nlevels(labf))
usecurl <- FALSE
bias <- 0
alpha <- 2
s <- 1
nc <- 10
d <- dfm(R,k=7,alpha=alpha,truncate=FALSE)
#d <- dfm(R,sigma=200,alpha=alpha,truncate=FALSE)
pairs(p$x[,2:5],col=sub("FF$","66",pal[labf]),pch=16,cex=0.8,asp=1)
plot.dfm(d,2:5,s=s,col=sub("FF$","66",pal[labf]))
W <- as.matrix(dist((d$Psi%*%diag(d$eig^s))[,seq(2,nc+1)]))
Pt <- d$Psi%*%diag(d$eig^s)%*%t(d$Phi)
# Energy at s step started from root cells (ensemble):
#   equiv. to start the process from v=(1/m,1/m,..,1/m,0,0,....)
u <- -log(colMeans(Pt[labf==root,,drop=FALSE]))
#u <- -log(d$Phi[,1]) # equibulium
#u <- colMeans(Pt[labf==root,,drop=FALSE])
#A <- sign(outer(u,u,"-"))
# negate gradient to espcape potential well
#A <- t(outer(u,u,"-"))
A <- t(outer(u,u,"-"))/W; diag(A) <- 0
#A <- totalflow(d)
dimnames(A) <- dimnames(R)
div_o <- A %>% graph.altmat %>% div %>% scale(center=FALSE) %>% drop
og <- graph.altmat(A)
#A[!(apply(W,1,knn,7) | t(apply(W,1,knn,7)))] <- 0 # KNN graph
A[!(apply(W,1,knn,30) | t(apply(W,1,knn,30)))] <- 0 # KNN graph
#A[!(apply(W,1,knn,15) | t(apply(W,1,knn,15)))] <- 0 # KNN graph
g <- graph.altmat(A) %>% as_tbl_graph %>%
mutate(group=labf, div=div(.), u=potential(.)) %>%
activate(edges) %>% mutate(grad=grad(.))
if(usecurl) {
C <- curlop(g)
phi <- solve(qr(tcrossprod(C)+bias*diag(nrow(C))),C%*%E(g)$weight)
g <- g %>% activate(edges) %>%
mutate(curl=drop(t(C)%*%phi),harmonic=weight-grad-curl) %E>%
filter(abs(weight) < 1e-6)
}
gggraphc(og,vcol="div",vsize="div^2") +
gggraphc(og,vcol="div",vsize="div^2")
gggraphc(og,vcol="div")
gggraphc(og,vcol="div")
og
ggraph(og)
ggraph(og)+geom_points(size=0.1)
ggraph(og)+geom_point(size=0.1)
ggraph(og)+geom_node_point(size=0.1)
ggraph(og)+geom_node_point(size=0.1)+theme_void()
ggraph(og)+geom_node_point(size=0.4)+theme_void()
ggraph(og)+geom_node_point(size=0.4,colour=div)+theme_void()
ggraph(og)+geom_node_point(aes(colour=div),size=0.4)+theme_void()
ggraph(og)+geom_node_point(aes(color=div),size=0.4)+theme_void()
og
V(og)$div <- div(og)
ggraph(og)+geom_node_point(aes(color=div),size=0.4)+theme_void()
ggraph(og)+geom_node_point(aes(color=div),size=0.4)+theme_void()+scale_color_gradient2(low="blue",mid="grey",high="red")
div(og)
dim(X)
dim(X[1:10])
dist(X[1:10,])
dist(t(X[1:10,]))
d <- diffusionMaps(dist(t(log(X+1))))
plot(d$Psi[,1:2],pch=16)
plot(d$Psi[,2:3],pch=16)
plot(d$Psi[,2:3],pch=16,col=div(og))
div(og)
?palette
colorRampPalette(c("blue", "grey", "red"))
cp <- colorRampPalette(c("blue", "grey", "red"))
cp(100)
plot(d$Psi[,2:3],pch=16,col=cp(256)[rank(div(og))])
plot(d$Psi[,2:3],pch=16,col="")
plot(d$Psi[,2:3],pch=16,col="black")
cp(256)[rank(div(og))]
rank(div(og))
plot(d$Psi[,2:3],pch=16,col=cp(256)[rank(div(og))])
pairs(d$Psi[,2:6],pch=16,col=cp(256)[rank(div(og))])
pairs(d$Psi%*%d$eig[,2:6],pch=16,col=cp(256)[rank(div(og))])
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(256)[rank(div(og))])
div(og)
div(og)/max(abs(div(og)))
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(256)[256*(div(og)/max(abs(div(og)))+1)])
256*(div(og)/max(abs(div(og)))+1)
range(256*(div(og)/max(abs(div(og)))+1))
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(256)[256*(div(og)/max(2*abs(div(og))))])
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(256)[256*(div(og)/max(2*abs(div(og)))+1)])
div(og)/max(2*abs(div(og)))+1)]
div(og)/max(2*abs(div(og)))+1)
div(og)/max(2*abs(div(og)))+1
range(div(og)/max(2*abs(div(og)))+1)
range(div(og)/max(abs(div(og)))+1)
range(div(og)/max(abs(div(og))))
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(256)[rank(div(og))])
cp
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col="black")
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(256)[rank(div(og))])
cp(256)[rank(div(og))
cp(256)[rank(div(og))]
rank(div(og))
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(372)[rank(div(og))])
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(372)[rank(potential(og))])
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(372)[rank(div(og))])
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(372)[rank(div(og))])
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(372)[rank(div(og))],asp=1)
pal <- ggsci::pal_d3("category20")(nlevels(labf))
usecurl <- FALSE
bias <- 0
alpha <- 2
s <- 1
nc <- 10
d <- dfm(R,k=7,alpha=alpha,truncate=FALSE)
#d <- dfm(R,sigma=200,alpha=alpha,truncate=FALSE)
pairs(p$x[,2:5],col=sub("FF$","66",pal[labf]),pch=16,cex=0.8,asp=1)
plot.dfm(d,2:5,s=s,col=sub("FF$","66",pal[labf]))
W <- as.matrix(dist((d$Psi%*%diag(d$eig^s))[,seq(2,nc+1)]))
Pt <- d$Psi%*%diag(d$eig^s)%*%t(d$Phi)
# Energy at s step started from root cells (ensemble):
#   equiv. to start the process from v=(1/m,1/m,..,1/m,0,0,....)
u <- -log(colMeans(Pt[labf==root,,drop=FALSE]))
#u <- -log(d$Phi[,1]) # equibulium
#u <- colMeans(Pt[labf==root,,drop=FALSE])
#A <- sign(outer(u,u,"-"))
# negate gradient to espcape potential well
#A <- t(outer(u,u,"-"))
A <- t(outer(u,u,"-"))/W; diag(A) <- 0
#A <- totalflow(d)
dimnames(A) <- dimnames(R)
div_o <- A %>% graph.altmat %>% div %>% scale(center=FALSE) %>% drop
og <- graph.altmat(A)
#A[!(apply(W,1,knn,7) | t(apply(W,1,knn,7)))] <- 0 # KNN graph
A[!(apply(W,1,knn,30) | t(apply(W,1,knn,30)))] <- 0 # KNN graph
#A[!(apply(W,1,knn,15) | t(apply(W,1,knn,15)))] <- 0 # KNN graph
g <- graph.altmat(A) %>% as_tbl_graph %>%
mutate(group=labf, div=div(.), u=potential(.)) %>%
activate(edges) %>% mutate(grad=grad(.))
if(usecurl) {
C <- curlop(g)
phi <- solve(qr(tcrossprod(C)+bias*diag(nrow(C))),C%*%E(g)$weight)
g <- g %>% activate(edges) %>%
mutate(curl=drop(t(C)%*%phi),harmonic=weight-grad-curl) %E>%
filter(abs(weight) < 1e-6)
}
gggraphc(g,vcol="div")
gggraphc(g,vcol="div")+scale_color_gradient2(low="blue",mid="grey",high="red")
gggraphc(g,vcol="div",vsize="div^2")+scale_color_gradient2(low="blue",mid="grey",high="red")
pairs(p$x[,2:5],col=sub("FF$","66",pal[labf]),pch=16,cex=0.8,asp=1)
pairs(d$Psi%*%diag(d$eig)[,2:6],pch=16,col=cp(372)[rank(div(og))],asp=1)
pairs(d$Psi%*%diag(d$eig)[,2:4],pch=16,col=cp(372)[rank(div(og))],asp=1)
plot(d$Psi%*%diag(d$eig)[,2:3],pch=16,col=cp(372)[rank(div(og))],asp=1)
plot(d$Psi%*%diag(d$eig)[,2:3],pch=16,col=pal[factor(group)])
plot(d$Psi%*%diag(d$eig)[,2:3],pch=16,col=cp(372)[rank(div(og))],asp=1)
devtools::check()
devtools::install()
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE67310&format=file&file=GSE67310%5FiN%5Fdata%5Flog2FPKM%5Fannotated.txt.gz"
url
a <- read.tsv(url)
a <- read.delim(url)
a <- read_tsv(url)
a <- readr::read_tsv(url)
a
url <- url("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE67310&format=file&file=GSE67310%5FiN%5Fdata%5Flog2FPKM%5Fannotated.txt.gz")
b <- open(url)
b
b <- gzfile(url)
b <- read.tsv(url)
b <- read.delim(url)
usethis::use_github()
usethis::use_github()
devtools::dr_github()
devtools::dr_github()
usethis::use_github()
devtools::dr_github()
use_git_config(user.name = "Kazumitsu MAEHARA", user.email = "kazumits@gmail.com")
usethis::use_git_config(user.name = "Kazumitsu MAEHARA", user.email = "kazumits@gmail.com")
usethis::use_git_config()
usethis::browse_github_pat()
usethis::edit_r_environ()
usethis::browse_github_pat()
usethis::edit_r_environ()
usethis::browse_github_pat()
library(ddhodge)
Sys.getenv("GITHUB_PAT")
usethis::browse_github_pat()
usethis::edit_r_environ()
